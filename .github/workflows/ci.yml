name: ci

on:
  push:
    branches: ["main"]

jobs:
  itemsapp-docker-ci:
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - name: checkout code
        uses: actions/checkout@v5

      - name: login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: docker buildx setup
        uses: docker/setup-buildx-action@v3

      - name: build backend with cache
        id: backend-build
        uses: docker/build-push-action@v6
        with:
          context: backend
          file: backend/Dockerfile
          push: True
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backend:buildcache,mode=max

      - name: build frontend with cache
        id: frontend-build
        uses: docker/build-push-action@v6
        with:
          context: frontend
          file: frontend/Dockerfile
          push: True
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/frontend:buildcache,mode=max

      - name: start prod docker container
        id: prod-docker-container
        run: docker compose -f docker-compose.base.yml -f docker-compose.prod.yml up -d

      - name: wait for backend to be healthy
        run: |
          until [ "$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/api/health)" -eq 200 ]; do
            sleep 2
          done

      # - name: run backend pytest tests
      #   run: docker exec backend cargo test

      # - name: cache pip
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      # - name: install locust
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install locust==2.40.2

      # - name: run backend locust tests
      #   run: locust -f locust_testing_backend.py --headless -u 10 -r 1 --run-time 30s --loglevel DEBUG

      # - name: run frontend locust tests
      #   run: locust -f locust_testing_frontend.py --headless -u 10 -r 1 --run-time 30s --loglevel DEBUG

      - name: close prod docker container
        run: docker compose -f docker-compose.base.yml -f docker-compose.prod.yml down

      - name: deploy to DigitalOcean Droplet via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/ItemsApp

            git reset --hard origin/main
            git pull

            docker compose down
            docker system prune --all --force

            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export REDIS_URL=${{ secrets.REDIS_URL }}
            export SECRET_KEY=${{ secrets.SECRET_KEY }}
            export FULLCHAIN_KEY=${{ secrets.FULLCHAIN_KEY }}
            export DOMAIN_PRIVKEY=${{ secrets.DOMAIN_PRIVKEY }}
            docker compose up --pull=always -d
